.{
    // This is the default name used by packages depending on this one. For
    // example, when a user runs `zig fetch --save <url>`, this field is used
    // as the key in the `dependencies` table. Although the user can choose a
    // different name, most users will stick with this provided value.
    //
    // It is redundant to include "zig" in this name because it is already
    // within the Zig package namespace.
    .name = "portapong",

    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.1",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    .minimum_zig_version = "0.13.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // .dependencies = .{
    //     .raylib = .{
    //         .url = "https://github.com/raysan5/raylib/archive/df849d2fb0c7df6a818f2f79dd8343565dd1274c.tar.gz",
    //         .hash = "1220dc010f1a422e36b01cdc1fca88f1319e9e094e8d0e7cbbcb34551e42203d14f4",
    //     },
    // },
    .dependencies = .{
        .raylib = .{
            .url = "https://github.com/raysan5/raylib/archive/52f2a10db610d0e9f619fd7c521db08a876547d0.tar.gz",
            .hash = "122078ad3e79fb83b45b04bd30fb63aaf936c6774db60095bc6987d325cbe5743373",
        },
    },
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .paths = .{
        "build.zig",
        "build.zig.zon",
        "src",
        "/Users/ben/builds/raylib/zig-out/",
        // For example...
        //"LICENSE",
        //"README.md",
    },
}
